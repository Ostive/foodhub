version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: foodhub-postgres
    environment:
      - POSTGRES_USER=foodhub
      - POSTGRES_PASSWORD=foodhub_password
      - POSTGRES_DB=foodhub
    ports:
      - "5431:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - foodhub-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U foodhub"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:6
    container_name: foodhub-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: foodhub
      MONGO_INITDB_ROOT_PASSWORD: foodhub_password
      MONGO_INITDB_DATABASE: foodhub
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - foodhub-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/foodhub --quiet
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Order Service
  order-service:
    build:
      context: .
      dockerfile: apps/order-service/Dockerfile
    container_name: foodhub-order-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://foodhub:foodhub_password@mongodb:27017/foodhub
      # Service configuration
      - API_PORT=3001
      - API_HOST=0.0.0.0
      - API_PROTOCOL=http
      - ORDER_SERVICE_PORT=3001
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - foodhub-network
    restart: unless-stopped

  # Restaurant Service
  restaurant-service:
    build:
      context: .
      dockerfile: apps/restaurant-service/Dockerfile
    container_name: foodhub-restaurant-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=foodhub
      - POSTGRES_PASSWORD=foodhub_password
      - POSTGRES_DB=foodhub
      # Service configuration
      - API_PORT=3002
      - API_HOST=0.0.0.0
      - API_PROTOCOL=http
      - RESTAURANT_SERVICE_PORT=3002
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - foodhub-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: .
      dockerfile: apps/user-service/Dockerfile
    container_name: foodhub-user-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      # Database configuration
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=foodhub
      - DATABASE_PASSWORD=foodhub_password
      - DATABASE_NAME=foodhub
      - DATABASE_SYNCHRONIZE=true
      - DATABASE_LOGGING=false
      - DATABASE_URL=postgres://foodhub:foodhub_password@postgres:5432/foodhub
      # Service configuration
      - API_PORT=3003
      - API_HOST=0.0.0.0
      - API_PROTOCOL=http
      - USER_SERVICE_PORT=3003
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - foodhub-network
    restart: unless-stopped

  # Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: foodhub-web
    ports:
      - "80:3000"
    environment:
      - NODE_ENV=production
      # Public URLs for frontend to access services
      - NEXT_PUBLIC_API_URL=http://localhost
      - NEXT_PUBLIC_APP_NAME=FoodHub
      # Internal service URLs (for server-side requests within Docker network)
      - USER_SERVICE_URL=http://user-service:3003
      - ORDER_SERVICE_URL=http://order-service:3001
      - RESTAURANT_SERVICE_URL=http://restaurant-service:3002
      # Public URLs for client-side requests
      - NEXT_PUBLIC_USER_SERVICE_URL=http://localhost:3003
      - NEXT_PUBLIC_ORDER_SERVICE_URL=http://localhost:3001
      - NEXT_PUBLIC_RESTAURANT_SERVICE_URL=http://localhost:3002
    depends_on:
      - user-service
      - order-service
      - restaurant-service
    networks:
      - foodhub-network
    restart: unless-stopped

networks:
  foodhub-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
